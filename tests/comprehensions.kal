describe 'List Comprehensions', ->
  it 'should support for expressions inside list definitions', ->
    a = [1,2,3,4]
    b = [x+1 for x in a]
    a.should.eql([1,2,3,4])
    b.should.eql([2,3,4,5])

  it 'should support for expressions with generators', ->
    class TestGen
      method initialize()
        me.i = 1
      method next()
        me.i += 1
        if me.i < 10
          return me.i
    t = new TestGen
    x = [y for y in t]
    x.should.eql([2,3,4,5,6,7,8,9])

  it "should support for expressions over an object's properties", ->
    y = {a:1,b:2,c:3}
    z1 = [k for property k in y]
    z1.should.eql(['a','b','c'])
    z2 = [v for property value v in y]
    z2.should.eql([1,2,3])
    z3 = ["#{k}: #{v}" for property k with value v in y]
    z3.should.eql(['a: 1','b: 2','c: 3'])

  it 'should support the `arguments` object', -> #gh-114
    function a()
      return [x+1 for x in arguments]
    a(1,2,3).should.eql [2,3,4]

  it 'should support list shortcut', ->
    [0 to 4].should.eql [0,1,2,3,4]
    [5 to 2].should.eql [5,4,3,2]
    [1 to 1].should.eql [1]

  it 'should support conditionals in list comprehensions', ->
    arr = [0 to 20]
    x = [i * 2 for i in arr if i < 2]
    x.should.eql [0,2]
    y = [i for i in arr except when i mod 2 isnt 0]
    y.should.eql [0,2,4,6,8,10,12,14,16,18,20]
    z = [i for i in arr if i ^ 0.5 in arr]
    z.should.eql [0,1,4,9,16]

  it 'should support conditionals in object comprehensions', ->
    obj =
      a: 1
      b: 2
      c: 3
      d: 4
    x = [k for property k in obj if k isnt 'b']
    x.sort()
    x.should.eql ['a','c','d']
    x = [v * 2 for property value v in obj unless v mod 2 is 1]
    x.sort()
    x.should.eql [4,8]
    x = [v for property k with value v in obj unless k is 'c']
    x.sort()
    x.should.eql [1,2,4]

  it 'should support function calls in list comprehensions', ->
    function lister(a)
      return [1+a,2+a,3+a]
    x = [y * 2 for y in lister 3]
    x.should.eql [8,10,12]
