describe 'For Statement', ->
  it 'should loop until the condition is false', ->
    i = 0
    iterable = ['this','is','a','test']
    out_s = ''
    for s in iterable
      out_s += s
      i += 1
    i.should.equal 4
    out_s.should.equal 'thisisatest'

  it 'should not execute if the iterable is empty', ->
    for x in []
      require('should').fail 'executed for loop on empty input'

  it 'should define and use the conditional in the appropriate scope', ->
    j = 1
    x = function ()
      for k in [1,2,3,4]
        z = 1
      for j in [1,2,3,4,5,6]
        z = 1
      return k
    x().should.equal 4
    j.should.equal 6
    (k exists).should.equal.false

  it 'should only evaluate the iterable once', ->
    n = [1,2,3,4]
    y = function ()
      n.push(100)
      return n
    i = 0
    for x in y()
      i += 1
    i.should.equal 5
    x.should.equal 100

  it 'should accept an expression as an iterable', ->
    s = "a,b,c,def"
    t = ','
    y = ''
    for x in s.split t
      y += x
    y.should.equal "abcdef"

  it 'should support object property enumeration', ->
    i = 0
    iterable = {'this':1,'is':2,'a':3,'test':4}
    out_s = ''
    for s of iterable
      out_s += s
      i += iterable[s]
    i.should.equal 1+2+3+4
    out_s.should.equal 'thisisatest'

  it 'should support an index variable', (done) -> #gh-118
    sum1 = 0
    sum2 = 0
    for x at i in [2,3,4,5]
      sum1 += x
      sum2 += i
    i.should.equal 3
    sum1.should.equal 14
    sum2.should.equal 6
    sum1 = 0
    sum2 = 0
    for series x at j in [2,3,4,5]
      sum1 += x
      pause for 0.001*j seconds
      sum2 += j
    sum1.should.equal 14
    sum2.should.equal 6
    sum1 = 0
    sum2 = 0
    for parallel x at i in [2,3,4,5]
      sum1 += x
      pause for 0.001*(4-i) seconds
      sum2 += i
    sum1.should.equal 14
    sum2.should.equal 6
    done()

  it 'should support generators', -> # gh-45
    class TestGen
      method initialize()
        me.i = 1
      method next()
        me.i += 1
        if me.i < 10
          return me.i
    t = new TestGen
    a = []
    for x from t
      a.push x
    a.should.eql [2 to 9]
    a = []
    for x from 2 to 4
      a.push x
    a.should.eql [2 to 4]
    a = []
    for x from 4 to 2
      a.push x
    a.should.eql [4 to 2]
